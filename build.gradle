plugins {
    id 'ru.vyarus.use-python' version '2.3.0'
}

python {
    // python binary name (python or python3 by default)
    pythonBinary
    // path to python binary (global by default)
    pythonPath
    // additional environment variables, visible for all python commands
    // Note: We specify the directory paths to search in the pytest.ini file
    environment = [:]

    // minimal required python version (m.m.m)
    minPythonVersion = '3.8'
    // minimal required pip version (m.m.m)
    minPipVersion = '9'

    // show all installed modules versions after pip installation
    showInstalledVersions = true
    // always call module install, even if correct version is already installed
    alwaysInstallModules = false
    // may be used to disable pip cache (--no-cache-dir option)
    usePipCache = true
    // additional pip repositories (--extra-index-url option)
    extraIndexUrls = []
    // trusted hosts for pip install (--trusted-host option)
    trustedHosts = []

    // pip modules installation scope (project local, os user dir, global)
    scope = VIRTUALENV_OR_USER
    // automatically install virtualenv module (if pip modules declared and scope allows)
    installVirtualenv = true
    // if virtualenv not installed (in --user scope), plugin will install exactly this version
    // (known to be working version) to avoid side effects
    virtualenvVersion = '20.4.2'
    // minimal required virtualenv (v20 is recommended, but by default 16 set to not fail previous
    // setups)
    minVirtualenvVersion = '20'
    // used virtualenv path (if virtualenv used, see 'scope')
    envPath
    // copy virtualenv instead of symlink (when created)
    envCopy = false

    pip 'pip:22.0.4'

    // Used in product itself
    pip 'websockets:10.2'
    pip 'aiohttp:3.8.1'

    // Used for testing
    pip 'pytest:6.2.5'
    pip 'pytest-asyncio:0.18.3'
    pip 'pytest-pythonpath:0.7.4'
    pip 'pytest-timeout:2.1.0'
    pip 'aiofiles:0.8.0'
    pip 'aioresponses:0.7.3'
}

task pytest(type: PythonTask) {
    module = 'pytest'
}

task test() {
}

tasks.withType(PythonTask) {
    if (rootProject.hasProperty("TestAccessToken")) {
        environment 'VANTIQ_ACCESS_TOKEN', rootProject.findProperty("TestAccessToken") ?: "empty"
    }
    if (rootProject.hasProperty("TestVantiqServer")) {
        environment 'VANTIQ_URL', rootProject.findProperty('TestVantiqServer')
    }
    if (rootProject.hasProperty('TestVantiqUsername')) {
        environment 'VANTIQ_USERNAME', rootProject.findProperty('TestVantiqUsername') ?: 'empty'
    }
    if (rootProject.hasProperty('TestVantiqPassword')) {
        environment 'VANTIQ_PASSWORD', rootProject.findProperty('TestVantiqPassword') ?: 'empty'
    }
}

task copyTestResources() {
    doLast {
        copy {
            from 'src/test/resources/'
            include 'logger.ini'
            into "."
        }
    }
}

task clean(type: Delete) {
    delete "${project.projectDir}/build"
    delete "${project.projectDir}/dist"
}

test.dependsOn pytest
pytest.dependsOn copyTestResources


